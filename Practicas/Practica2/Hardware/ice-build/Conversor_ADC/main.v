// Code generated by Icestudio 0.12

`default_nettype none

//---- Top entity
module main (
 input v018452,
 input vc1fab7,
 input [2:0] v3114e1,
 input v8cb5f7,
 input v52f998,
 input [7:0] vf9c0f9,
 output v43a0a3,
 output v80564b,
 output va66fd9,
 output [2:0] v376d64,
 output [7:0] v2c0d1d,
 output v031fc0,
 output [0:7] vinit
);
 wire w0;
 wire w1;
 wire [0:2] w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:2] w6;
 wire w7;
 wire [0:7] w8;
 wire w9;
 wire w10;
 wire [0:7] w11;
 assign w0 = v018452;
 assign w1 = vc1fab7;
 assign w2 = v3114e1;
 assign w3 = v8cb5f7;
 assign v43a0a3 = w4;
 assign v80564b = w5;
 assign v376d64 = w6;
 assign va66fd9 = w7;
 assign v2c0d1d = w8;
 assign v031fc0 = w9;
 assign w10 = v52f998;
 assign w11 = vf9c0f9;
 main_vba7b65 vba7b65 (
  .clk(w0),
  .rst(w1),
  .addr_in(w2),
  .start(w3),
  .conv_ale(w4),
  .conv_start(w5),
  .conv_addr(w6),
  .conv_oe(w7),
  .data_out(w8),
  .data_valid(w9),
  .conv_eoc(w10),
  .conv_data(w11)
 );
 assign vinit = 8'b00000000;
endmodule


module main_vba7b65 (
 input clk,
 input rst,
 input [2:0] addr_in,
 input start,
 input conv_eoc,
 input [7:0] conv_data,
 output conv_ale,
 output conv_start,
 output conv_oe,
 output [2:0] conv_addr,
 output [7:0] data_out,
 output data_valid
);
 // M치quina de estados
 reg [1:0] state; // Estados: 0 = IDLE, 1 = ALE, 2 = START, 3 = READ DATA
 
 // Registros intermedios
 reg conv_start_reg;
 reg conv_ale_reg;
 reg conv_oe_reg;
 reg [2:0] conv_addr_reg;
 reg [7:0] data_out_reg;
 reg data_valid_reg;
 
 // Asignar registros a las salidas
 assign conv_start = conv_start_reg;
 assign conv_ale = conv_ale_reg;
 assign conv_oe = conv_oe_reg;
 assign conv_addr = conv_addr_reg;
 assign data_out = data_out_reg;
 assign data_valid = data_valid_reg;
 
 always @(posedge clk or posedge rst) begin
     if (rst) begin
         state <= 0;
         conv_start_reg <= 0;
         conv_ale_reg <= 0;
         conv_oe_reg <= 0;
         conv_addr_reg <= 3'b000;
         data_valid_reg <= 0;
         data_out_reg <= 8'b00000000;
     end else begin
         case (state)
             0: begin
                 conv_ale_reg <= 1; // Capturar la direcci칩n del canal
                 conv_addr_reg <= addr_in; // Seleccionar canal
                 data_valid_reg <= 0; // Asegurar que no haya datos viejos
                 state <= 1;
             end
             1: begin
                 conv_ale_reg <= 0;
                 conv_start_reg <= 1; // Iniciar conversi칩n
                 state <= 2;
             end
             2: begin
                 conv_start_reg <= 0;
                 if (conv_eoc) begin // Esperar fin de conversi칩n
                     conv_oe_reg <= 1; // Habilitar salida de datos
                     state <= 3;
                 end
             end
             3: begin
                 data_out_reg <= conv_data; // Capturar dato digitalizado
                 data_valid_reg <= 1; // Dato listo
                 conv_oe_reg <= 0; // Deshabilitar salida del ADC
                 state <= 0; // Reiniciar
             end
         endcase
     end
 end
 
endmodule
