// Code generated by Icestudio 0.12
// Fri, 18 Jul 2025 16:02:08 GMT

`default_nettype none

//---- Top entity
module main #(
 parameter v6cd675 = 1024
) (
 input vclk,
 output [0:7] vinit
);
 localparam p0 = v6cd675;
 wire w1;
 assign w1 = vclk;
 vaba674 #(
  .v6478b6(p0)
 ) v9df961 (
  .v04ad7a(w1)
 );
 assign vinit = 8'b00000000;
endmodule

//---- Top entity
module vaba674 #(
 parameter v6478b6 = 1024
) (
 input v04ad7a,
 input [3:0] vd728f0,
 input v22c516,
 input vd7d395,
 input [31:0] v387cca,
 input [31:0] v8d6432,
 output v69f1ab,
 output [31:0] v13ce3e
);
 localparam p2 = v6478b6;
 wire [0:21] w0;
 wire [0:23] w1;
 wire w3;
 wire [0:3] w4;
 wire w5;
 wire w6;
 wire w7;
 wire [0:31] w8;
 wire [0:31] w9;
 wire w10;
 wire w11;
 wire [0:3] w12;
 wire [0:31] w13;
 wire w14;
 wire [0:31] w15;
 wire w16;
 wire w17;
 assign w8 = v387cca;
 assign w9 = v387cca;
 assign w10 = v22c516;
 assign w11 = vd7d395;
 assign w12 = vd728f0;
 assign w13 = v8d6432;
 assign v69f1ab = w14;
 assign v13ce3e = w15;
 assign w16 = v04ad7a;
 assign w17 = v04ad7a;
 assign w5 = w3;
 assign w9 = w8;
 assign w17 = w16;
 vf0a7c1 v00b15c (
  .vd903fe(w1),
  .v2ebc76(w9)
 );
 v359d9b v2b0874 (
  .vc5ea70(w0),
  .v84d8ec(w1)
 );
 vf6999a vaf52fa (
  .v7b40f2(w3),
  .vfa6171(w6),
  .v76af38(w7),
  .v7cacc4(w11)
 );
 v127665 #(
  .v16d6b8(p2)
 ) v9d2eb0 (
  .v18e78c(w7),
  .v229966(w8)
 );
 v35f267 v19c0ab (
  .vcbab45(w6),
  .v0e28cb(w10)
 );
 v13d09a vc5282a (
  .ve2642f(w4),
  .v76af38(w5),
  .vd317b3(w12)
 );
 v58ed2b ve2ae4f (
  .vf54559(w3),
  .ve8318d(w14),
  .va4102a(w16)
 );
 v33720b v13b1f8 (
  .va79cbd(w0),
  .vc52d9a(w4),
  .v72eed5(w13),
  .v02f96f(w15),
  .vfa6941(w17)
 );
endmodule

//---------------------------------------------------
//-- RAM-1KB-soc
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- RAM block (1KB) with logic
//---------------------------------------------------
//---- Top entity
module vf0a7c1 (
 input [31:0] v2ebc76,
 output [7:0] v87715f,
 output [23:0] vd903fe
);
 wire [0:31] w0;
 wire [0:23] w1;
 wire [0:7] w2;
 assign w0 = v2ebc76;
 assign vd903fe = w1;
 assign v87715f = w2;
 vf0a7c1_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Separador-8-24
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Separador de bus de 32-bits en buses de 8 y 24 bits
//---------------------------------------------------

module vf0a7c1_v9a2a06 (
 input [31:0] i,
 output [7:0] o1,
 output [23:0] o0
);
 assign o1 = i[31:24];
 assign o0 = i[23:0];
endmodule
//---- Top entity
module v359d9b (
 input [23:0] v84d8ec,
 output [21:0] vc5ea70,
 output [1:0] v47f12b
);
 wire [0:21] w0;
 wire [0:1] w1;
 wire [0:23] w2;
 assign vc5ea70 = w0;
 assign v47f12b = w1;
 assign w2 = v84d8ec;
 v359d9b_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

//---------------------------------------------------
//-- Separador-22-2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Separador de bus de 24-bits en dos buses de 22 y 2 bits
//---------------------------------------------------

module v359d9b_v9a2a06 (
 input [23:0] i,
 output [21:0] o1,
 output [1:0] o0
);
 assign o1 = i[23:2];
 assign o0 = i[1:0];
endmodule
//---- Top entity
module vf6999a (
 input vfa6171,
 input v7cacc4,
 input v76af38,
 output v7b40f2
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign v7b40f2 = w1;
 assign w2 = vfa6171;
 assign w3 = v7cacc4;
 assign w4 = v76af38;
 vb2090f v85500b (
  .vcbab45(w0),
  .v0e28cb(w2),
  .v3ca442(w3)
 );
 vb2090f v241483 (
  .v0e28cb(w0),
  .vcbab45(w1),
  .v3ca442(w4)
 );
endmodule

//---------------------------------------------------
//-- AND3
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta AND de 3 entradas
//---------------------------------------------------
//---- Top entity
module vb2090f (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb2090f_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- AND
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta AND
//---------------------------------------------------

module vb2090f_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule
//---- Top entity
module v127665 #(
 parameter v16d6b8 = 1
) (
 input [31:0] v229966,
 output v18e78c
);
 localparam p1 = v16d6b8;
 wire w0;
 wire [0:31] w2;
 assign v18e78c = w0;
 assign w2 = v229966;
 v127665_vd75681 #(
  .B(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

//---------------------------------------------------
//-- Menor-que-1-op
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comparador menor que, de un operando de 32 bits
//---------------------------------------------------

module v127665_vd75681 #(
 parameter B = 0
) (
 input [31:0] a,
 output eq
);
 assign eq = (a < B);
endmodule
//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

//---------------------------------------------------
//-- NOT
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta NOT
//---------------------------------------------------

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module v13d09a (
 input [3:0] vd317b3,
 input v76af38,
 output [3:0] ve2642f
);
 wire w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign w0 = v76af38;
 assign w1 = vd317b3;
 assign ve2642f = w2;
 v13d09a_vce9fab vce9fab (
  .b(w0),
  .a(w1),
  .o(w2)
 );
endmodule

//---------------------------------------------------
//-- AND-4-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta AND de dos operandos, de 1 y 4 bits
//---------------------------------------------------

module v13d09a_vce9fab (
 input [3:0] a,
 input b,
 output [3:0] o
);
 assign o[3] = a[3] & b;
 assign o[2] = a[2] & b;
 assign o[1] = a[1] & b;
 assign o[0] = a[0] & b;
endmodule
//---- Top entity
module v58ed2b #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 output va58c5b,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 v58ed2b_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3)
 );
endmodule

//---------------------------------------------------
//-- sys-DFF-verilog
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- System - D Flip-flop. Capture data every system clock cycle. Verilog implementation
//---------------------------------------------------

module v58ed2b_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output q
);
 //-- Initial value
 reg qi = INI;
 
 //-- Capture the input data  
 //-- on the rising edge of  
 //-- the system clock
 always @(posedge clk)
   qi <= d;
   
 //-- Connect the register with the
 //-- output
 assign q = qi;
endmodule
//---- Top entity
module v33720b (
 input vfa6941,
 input [3:0] vc52d9a,
 input [21:0] va79cbd,
 input [31:0] v72eed5,
 output [31:0] v02f96f
);
 wire [0:3] w0;
 wire [0:21] w1;
 wire [0:31] w2;
 wire [0:31] w3;
 wire w4;
 assign w0 = vc52d9a;
 assign w1 = va79cbd;
 assign w2 = v72eed5;
 assign v02f96f = w3;
 assign w4 = vfa6941;
 v33720b_v0ae20e v0ae20e (
  .wen(w0),
  .addr(w1),
  .wdata(w2),
  .rdata(w3),
  .clk(w4)
 );
endmodule

//---------------------------------------------------
//-- RAM-1KB
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Memoria ram de 1KB (256x32bits)
//---------------------------------------------------

module v33720b_v0ae20e (
 input clk,
 input [3:0] wen,
 input [21:0] addr,
 input [31:0] wdata,
 output [31:0] rdata
);
 localparam integer WORDS = 256;
 
 reg [31:0] mem [0:WORDS-1];
 reg [31:0] rdata_i;
 assign rdata = rdata_i;
 
 	always @(posedge clk) begin
 		rdata_i <= mem[addr];
 		if (wen[0]) mem[addr][ 7: 0] <= wdata[ 7: 0];
 		if (wen[1]) mem[addr][15: 8] <= wdata[15: 8];
 		if (wen[2]) mem[addr][23:16] <= wdata[23:16];
 		if (wen[3]) mem[addr][31:24] <= wdata[31:24];
 	end
endmodule
