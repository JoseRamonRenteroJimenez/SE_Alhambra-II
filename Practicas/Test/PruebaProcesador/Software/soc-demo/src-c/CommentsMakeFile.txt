##-- Riscv toolchain path
FIRMWARE = test 
# Nombre base del firmware 
RISCV=/usr/bin
# Directorio donde estan las herramientas del compilador enlazador y generador de binarios de RISCV 


prog: $(FIRMWARE).bin
	# Regla prog que depende de que exista el archivo test.bin
	~/icestudio/oss-cad-suite/bin/iceprog -o 1M $(FIRMWARE).bin 
	# Utiliza iceprog para cargar el test.bin  "-o 1M" indica que el binario debe cargarse a partir de la direccion 1MB de la memoria flash

$(FIRMWARE).elf: sections.lds start.s $(FIRMWARE).c 
#  Define como se genera el .elf con los archivos de entrada "sections.lds" -> Script de enlazador, como se organizan las ELF en memria
# start.s -> Codigo en ensamblador que inicializa el programa   # test.c -> Codigo en C del firmware
	$(RISCV)/riscv64-unknown-elf-gcc -DHX8KDEMO -march=rv32im -mabi=ilp32 -Wl,-Bstatic,-T,sections.lds,--strip-debug -ffreestanding -nostdlib -o $(FIRMWARE).elf start.s $(FIRMWARE).c

# -DHX8KDEMO: Define la macro HX8KDEMO durante la compilación
# -march=rv32im: Indica que el programa usa el conjunto de instrucciones RISC-V 32-bit con extensiones I (integer) y M (multiplicación)
# -mabi=ilp32: Define el ABI para operaciones con enteros, largos y punteros de 32 bits
# -Wl,-Bstatic,-T,sections.lds: Usa el enlazador para crear un binario estático usando el script sections.lds
# --strip-debug: Elimina información de depuración del ELF
# -ffreestanding: Compila sin depender de la biblioteca estándar
# -nostdlib: Omite el uso de bibliotecas estándar como libc


$(FIRMWARE).hex: $(FIRMWARE).elf
	# Define cómo convertir el ELF (test.elf) a un archivo hexadecimal (test.hex) en formato Verilog.
	$(RISCV)/riscv64-unknown-elf-objcopy -O verilog $(FIRMWARE).elf $(FIRMWARE).hex
	# Convierte el binario ELF a un formato hexadecimal legible para Verilog.

$(FIRMWARE).bin: $(FIRMWARE).elf  #Define cómo convertir el ELF (test.elf) a un archivo binario (test.bin).
	$(RISCV)/riscv64-unknown-elf-objcopy -O binary $(FIRMWARE).elf $(FIRMWARE).bin
	#Convierte el ELF a un binario crudo, adecuado para cargar en la memoria del FPGA.
# ---- Clean ----

clean:
	rm -f $(FIRMWARE).elf $(FIRMWARE).hex $(FIRMWARE).bin 
	#Limpia los archivos generados (test.elf, test.hex, test.bin)

.PHONY: prog
	# Declara que prog no es un archivo real, sino un nombre especial para ejecutar comandos. Esto asegura que make prog siempre se ejecute aunque exista un archivo llamado prog

#init..: Inicialización de la programación.
#cdone: high: Indica que el dispositivo está listo para ser programado.
#flash ID: ...: Muestra la identificación de la memoria flash.
#file size: 1518: Indica el tamaño del archivo binario en bytes.
#erase 64kB sector at 0x100000..: Borra un sector de 64 kB en la dirección especificada.
#programming..: Carga el binario en la memoria flash.
#reading.. y VERIFY OK: Lee y verifica que la programación fue exitosa.
#cdone: high y Bye.: Indica que la programación ha terminado.
