// Code generated by Icestudio 0.12
// Wed, 16 Jul 2025 16:32:14 GMT

`default_nettype none

//---- Top entity
module main #(
 parameter v82a86e = 'h0200_0008
) (
 input ved04fe,
 input v3ee340,
 input vc37eea,
 input [31:0] vc81085,
 input v8274de,
 input [31:0] va681b1,
 input [3:0] vb3f76d,
 output v1b5274,
 output [31:0] v3f8171,
 output vd1cde2,
 output v7e70fa,
 output [0:7] vinit
);
 localparam p5 = v82a86e;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:31] w4;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire [0:3] w10;
 wire [0:31] w11;
 wire [0:3] w12;
 wire w13;
 wire w14;
 wire w15;
 wire [0:31] w16;
 wire w17;
 wire [0:31] w18;
 wire w19;
 wire w20;
 wire w21;
 wire w22;
 wire w23;
 wire w24;
 assign vd1cde2 = w0;
 assign v1b5274 = w2;
 assign v3f8171 = w4;
 assign w10 = vb3f76d;
 assign w13 = ved04fe;
 assign w14 = v3ee340;
 assign w15 = vc37eea;
 assign w16 = vc81085;
 assign w17 = v8274de;
 assign w18 = va681b1;
 assign v7e70fa = w23;
 assign w20 = w19;
 assign w22 = w21;
 assign w23 = w21;
 assign w23 = w22;
 assign w24 = w21;
 assign w24 = w22;
 assign w24 = w23;
 v35f267 v45faa7 (
  .vcbab45(w1),
  .v0e28cb(w3)
 );
 vb2090f v7ef37f (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w24)
 );
 ve4ece1 vda84f3 (
  .va76a47(w2),
  .v3c7d9a(w3),
  .vb7609f(w4),
  .v10961b(w7),
  .vfeadd9(w9),
  .v20a2cd(w11),
  .v8e9021(w12),
  .v0dfcfa(w13),
  .v19f118(w14),
  .v13457e(w15),
  .v3674d3(w18)
 );
 vf9bdaf #(
  .v6b316b(p5)
 ) vbacb28 (
  .v18e78c(w6),
  .ve1f562(w16)
 );
 vb2090f vb27c73 (
  .v0e28cb(w6),
  .v3ca442(w17),
  .vcbab45(w21)
 );
 vb2090f v1ac36e (
  .vcbab45(w7),
  .v3ca442(w8),
  .v0e28cb(w21)
 );
 v35f267 v63c939 (
  .vcbab45(w8),
  .v0e28cb(w19)
 );
 vb2090f v1f0eaf (
  .vcbab45(w9),
  .v0e28cb(w20),
  .v3ca442(w22)
 );
 v45c913 v6f72c9 (
  .v930b03(w10),
  .v593f43(w19)
 );
 v2c97f6 va29e81 (
  .v7c9bd8(w11)
 );
 v6a0d89 v4b9f27 (
  .v919d0f(w12)
 );
 assign vinit = 8'b00000000;
endmodule

//---- Top entity
module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

//---------------------------------------------------
//-- NOT
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta NOT
//---------------------------------------------------

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule
//---- Top entity
module vb2090f (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vb2090f_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- AND
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Puerta AND
//---------------------------------------------------

module vb2090f_vf4938a (
 input a,
 input b,
 output c
);
 //-- Puerta AND
 
 //-- module and (input wire a, input wire b,
 //--             output wire c);
 
 assign c = a & b;
 
 //-- endmodule
endmodule
//---- Top entity
module ve4ece1 (
 input v0dfcfa,
 input v19f118,
 input v13457e,
 input [3:0] v8e9021,
 input vfeadd9,
 input v10961b,
 input [31:0] v3674d3,
 input [31:0] v20a2cd,
 output va76a47,
 output [31:0] vc35967,
 output [31:0] vb7609f,
 output v3c7d9a
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 wire w5;
 wire w6;
 wire [0:31] w7;
 wire [0:31] w8;
 wire [0:31] w9;
 wire [0:31] w10;
 wire w11;
 assign va76a47 = w0;
 assign w1 = v13457e;
 assign w2 = v0dfcfa;
 assign w3 = v19f118;
 assign w4 = v8e9021;
 assign w5 = vfeadd9;
 assign w6 = v10961b;
 assign w7 = v3674d3;
 assign w8 = v20a2cd;
 assign vc35967 = w9;
 assign vb7609f = w10;
 assign v3c7d9a = w11;
 ve4ece1_v7323f5 v7323f5 (
  .ser_tx(w0),
  .ser_rx(w1),
  .clk(w2),
  .resetn(w3),
  .reg_div_we(w4),
  .reg_dat_we(w5),
  .reg_dat_re(w6),
  .reg_dat_di(w7),
  .reg_div_di(w8),
  .reg_div_do(w9),
  .reg_dat_do(w10),
  .reg_dat_wait(w11)
 );
endmodule

//---------------------------------------------------
//-- UART
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Uart para comunicaciones serie con el pico-riscv
//---------------------------------------------------

module ve4ece1_v7323f5 (
 input clk,
 input resetn,
 input ser_rx,
 input [3:0] reg_div_we,
 input reg_dat_we,
 input reg_dat_re,
 input [31:0] reg_dat_di,
 input [31:0] reg_div_di,
 output ser_tx,
 output [31:0] reg_div_do,
 output [31:0] reg_dat_do,
 output reg_dat_wait
);
 reg [31:0] cfg_divider=104;
 
 	reg [3:0] recv_state;
 	reg [31:0] recv_divcnt;
 	reg [7:0] recv_pattern;
 	reg [7:0] recv_buf_data;
 	reg recv_buf_valid;
 
 	reg [9:0] send_pattern;
 	reg [3:0] send_bitcnt;
 	reg [31:0] send_divcnt;
 	reg send_dummy;
 
 	assign reg_div_do = cfg_divider;
 
 	assign reg_dat_wait = reg_dat_we && (send_bitcnt || send_dummy);
 	assign reg_dat_do = recv_buf_valid ? recv_buf_data : ~0;
 /*
 	always @(posedge clk) begin
 		if (!resetn) begin
 			cfg_divider <= 1;
 		end else begin
 			if (reg_div_we[0]) cfg_divider[ 7: 0] <= reg_div_di[ 7: 0];
 			if (reg_div_we[1]) cfg_divider[15: 8] <= reg_div_di[15: 8];
 			if (reg_div_we[2]) cfg_divider[23:16] <= reg_div_di[23:16];
 			if (reg_div_we[3]) cfg_divider[31:24] <= reg_div_di[31:24];
 		end
 	end
 */
 	always @(posedge clk) begin
 		if (!resetn) begin
 			recv_state <= 0;
 			recv_divcnt <= 0;
 			recv_pattern <= 0;
 			recv_buf_data <= 0;
 			recv_buf_valid <= 0;
 		end else begin
 			recv_divcnt <= recv_divcnt + 1;
 			if (reg_dat_re)
 				recv_buf_valid <= 0;
 			case (recv_state)
 				0: begin
 					if (!ser_rx)
 						recv_state <= 1;
 					recv_divcnt <= 0;
 				end
 				1: begin
 					if (2*recv_divcnt > cfg_divider) begin
 						recv_state <= 2;
 						recv_divcnt <= 0;
 					end
 				end
 				10: begin
 					if (recv_divcnt > cfg_divider) begin
 						recv_buf_data <= recv_pattern;
 						recv_buf_valid <= 1;
 						recv_state <= 0;
 					end
 				end
 				default: begin
 					if (recv_divcnt > cfg_divider) begin
 						recv_pattern <= {ser_rx, recv_pattern[7:1]};
 						recv_state <= recv_state + 1;
 						recv_divcnt <= 0;
 					end
 				end
 			endcase
 		end
 	end
 
 	assign ser_tx = send_pattern[0];
 
 	always @(posedge clk) begin
 		if (reg_div_we)
 			send_dummy <= 1;
 		send_divcnt <= send_divcnt + 1;
 		if (!resetn) begin
 			send_pattern <= ~0;
 			send_bitcnt <= 0;
 			send_divcnt <= 0;
 			send_dummy <= 1;
 		end else begin
 			if (send_dummy && !send_bitcnt) begin
 				send_pattern <= ~0;
 				send_bitcnt <= 15;
 				send_divcnt <= 0;
 				send_dummy <= 0;
 			end else
 			if (reg_dat_we && !send_bitcnt) begin
 				send_pattern <= {1'b1, reg_dat_di[7:0], 1'b0};
 				send_bitcnt <= 10;
 				send_divcnt <= 0;
 			end else
 			if (send_divcnt > cfg_divider && send_bitcnt) begin
 				send_pattern <= {1'b1, send_pattern[9:1]};
 				send_bitcnt <= send_bitcnt - 1;
 				send_divcnt <= 0;
 			end
 		end
 	end
endmodule
//---- Top entity
module vf9bdaf #(
 parameter v6b316b = 0
) (
 input [31:0] ve1f562,
 output v18e78c
);
 localparam p1 = v6b316b;
 wire w0;
 wire [0:31] w2;
 assign v18e78c = w0;
 assign w2 = ve1f562;
 vf9bdaf_vd75681 #(
  .K(p1)
 ) vd75681 (
  .eq(w0),
  .a(w2)
 );
endmodule

//---------------------------------------------------
//-- Comparador
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comparador de un operando de 32 bits. Se compara si el operando es igual al parÃ¡metro
//---------------------------------------------------

module vf9bdaf_vd75681 #(
 parameter K = 0
) (
 input [31:0] a,
 output eq
);
 assign eq = (a == K);
endmodule
//---- Top entity
module v45c913 (
 input [3:0] v930b03,
 output v5b73e8,
 output vc90115,
 output v2812a7,
 output v593f43
);
 wire [0:3] w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v930b03;
 assign v2812a7 = w1;
 assign v593f43 = w2;
 assign vc90115 = w3;
 assign v5b73e8 = w4;
 v45c913_v9a2a06 v9a2a06 (
  .i(w0),
  .o1(w1),
  .o0(w2),
  .o2(w3),
  .o3(w4)
 );
endmodule

//---------------------------------------------------
//-- Separador-bus
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Separador de bus de 4-bits en 4 cables
//---------------------------------------------------

module v45c913_v9a2a06 (
 input [3:0] i,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v2c97f6 #(
 parameter vfffc23 = 0
) (
 output [31:0] v7c9bd8
);
 localparam p0 = vfffc23;
 wire [0:31] w1;
 assign v7c9bd8 = w1;
 v959751 #(
  .vc5c8ea(p0)
 ) v9f49e7 (
  .vbc97e4(w1)
 );
endmodule

//---------------------------------------------------
//-- 32bits-Value_0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 32bits constant value: 0
//---------------------------------------------------
//---- Top entity
module v959751 #(
 parameter vc5c8ea = 0
) (
 output [31:0] vbc97e4
);
 localparam p0 = vc5c8ea;
 wire [0:31] w1;
 assign vbc97e4 = w1;
 v959751_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 32-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 32-bits generic constant
//---------------------------------------------------

module v959751_v465065 #(
 parameter VALUE = 0
) (
 output [31:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module v6a0d89 #(
 parameter vfffc23 = 0
) (
 output [3:0] v919d0f
);
 localparam p0 = vfffc23;
 wire [0:3] w1;
 assign v919d0f = w1;
 v9b9118 #(
  .vc5c8ea(p0)
 ) v76a485 (
  .v1ef182(w1)
 );
endmodule

//---------------------------------------------------
//-- 4bits-Value_0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 4bits constant value: 0
//---------------------------------------------------
//---- Top entity
module v9b9118 #(
 parameter vc5c8ea = 0
) (
 output [3:0] v1ef182
);
 localparam p0 = vc5c8ea;
 wire [0:3] w1;
 assign v1ef182 = w1;
 v9b9118_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 4-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 4-bits generic constant (0-15)
//---------------------------------------------------

module v9b9118_v465065 #(
 parameter VALUE = 0
) (
 output [3:0] k
);
 assign k = VALUE;
endmodule
